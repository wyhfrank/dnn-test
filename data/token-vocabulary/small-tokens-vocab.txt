(def_block
r_class
id
(brace
(brace
r_try
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
)brace
r_catch
(paren
id
id
)paren
(brace
id
dot
id
c_func
(paren
l_string
op_plus
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_int
)paren
suffix:semicolon
)brace
)brace
(def_block
r_void
id
c_func
(paren
id
id
(braket
)braket
)paren
(brace
id
id
op_assign
r_new
id
c_func
(paren
)paren
suffix:semicolon
id
id
op_assign
r_new
id
c_func
(paren
)paren
suffix:semicolon
id
id
op_assign
r_new
id
c_func
(paren
)paren
suffix:semicolon
id
id
op_assign
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
id
op_assign
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
id
op_assign
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
id
op_assign
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
)def_block
)brace
)def_block
eof
(def_block
r_class
id
(brace
(def_block
id
c_func
(paren
id
id
)paren
(brace
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
)def_block
(def_block
r_boolean
id
c_func
(paren
)paren
(brace
r_return
l_bool
suffix:semicolon
)brace
)def_block
)brace
)def_block
eof
(def_block
r_class
id
(brace
)brace
)def_block
eof
(def_block
r_class
id
(brace
(def_block
id
id
c_func
(paren
id
id
)paren
(brace
id
id
op_assign
r_new
id
c_func
(paren
)paren
suffix:semicolon
r_char
id
suffix:semicolon
r_for
c_loop
(paren
r_int
id
op_assign
l_int
suffix:semicolon
id
OL
id
dot
m_length
suffix:semicolon
id
op_increment
)paren
(brace
r_switch
c_cond
(paren
id
dot
m_charAt
c_func
(paren
id
)paren
)paren
(brace
r_case
l_int
suffix:colon
(brace
r_continue
suffix:semicolon
)brace
r_case
l_char
suffix:colon
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
r_continue
suffix:semicolon
)brace
r_case
l_char
suffix:colon
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
r_continue
suffix:semicolon
)brace
r_case
l_char
suffix:colon
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
r_continue
suffix:semicolon
)brace
r_case
l_char
suffix:colon
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
r_continue
suffix:semicolon
)brace
r_case
l_char
suffix:colon
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
r_continue
suffix:semicolon
)brace
r_case
l_char
suffix:colon
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
r_continue
suffix:semicolon
)brace
r_case
l_char
suffix:colon
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
r_continue
suffix:semicolon
)brace
r_case
l_char
suffix:colon
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
r_continue
suffix:semicolon
)brace
r_default
suffix:colon
(brace
r_if
c_cond
(paren
(paren
id
op_assign
id
dot
m_charAt
c_func
(paren
id
)paren
)paren
OL
l_int
op_logical_or
id
OG
l_int
)paren
(brace
id
id
op_assign
l_string
op_plus
id
dot
m_toString
c_func
(paren
id
comma
l_int
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
op_plus
id
dot
id
c_func
(paren
id
dot
m_length
l_int
comma
id
dot
m_length
)paren
)paren
suffix:semicolon
)brace
r_else
(brace
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
r_continue
suffix:semicolon
)brace
)brace
)brace
r_return
id
dot
m_toString
c_func
(paren
)paren
suffix:semicolon
)brace
)def_block
(def_block
id
id
c_func
(paren
r_boolean
id
comma
r_int
id
comma
r_int
id
comma
r_int
id
comma
id
id
comma
r_char
id
)paren
(brace
r_return
l_string
op_plus
id
op_plus
l_string
op_plus
id
op_plus
l_string
op_plus
(paren
id
ques
c_cond
l_string
suffix:colon
(paren
l_string
op_plus
id
c_func
(paren
id
dot
id
c_func
(paren
id
)paren
)paren
op_plus
l_string
)paren
op_plus
l_string
op_plus
(paren
r_int
)paren
id
op_plus
l_string
)paren
op_plus
l_string
op_plus
id
c_func
(paren
id
)paren
op_plus
l_string
suffix:semicolon
)brace
)def_block
(def_block
id
c_func
(paren
)paren
(brace
)brace
)def_block
(def_block
id
c_func
(paren
id
id
comma
r_int
id
)paren
(brace
id
c_func
(paren
id
)paren
suffix:semicolon
id
op_assign
id
suffix:semicolon
)brace
)def_block
(def_block
id
c_func
(paren
r_boolean
id
comma
r_int
id
comma
r_int
id
comma
r_int
id
comma
id
id
comma
r_char
id
comma
r_int
id
)paren
(brace
id
c_func
(paren
id
c_func
(paren
id
comma
id
comma
id
comma
id
comma
id
comma
id
)paren
comma
id
)paren
suffix:semicolon
)brace
)def_block
)brace
)def_block
eof
(def_block
r_class
id
(brace
(def_block
id
id
c_func
(paren
id
id
)paren
(brace
r_return
r_null
suffix:semicolon
)brace
)def_block
(def_block
r_void
id
c_func
(paren
id
id
)paren
(brace
id
id
op_assign
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
)def_block
)brace
)def_block
eof
(def_block
r_class
id
(brace
(def_block
r_void
id
c_func
(paren
id
id
comma
id
id
comma
id
id
comma
id
id
comma
id
id
comma
id
id
comma
id
id
comma
r_boolean
id
)paren
(brace
id
id
op_assign
r_null
suffix:semicolon
id
id
op_assign
r_null
suffix:semicolon
r_try
(brace
id
op_assign
r_new
id
c_func
(paren
l_string
op_plus
id
op_plus
l_string
)paren
suffix:semicolon
id
op_assign
r_new
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
r_catch
(paren
id
id
)paren
(brace
id
dot
id
c_func
(paren
l_string
op_plus
id
op_plus
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_int
)paren
suffix:semicolon
)brace
id
dot
id
c_func
(paren
l_string
op_plus
id
dot
id
c_func
(paren
)paren
op_plus
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
op_plus
id
dot
id
c_func
(paren
)paren
op_plus
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
op_plus
id
)paren
suffix:semicolon
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
r_else
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
)brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
id
dot
id
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
id
c_func
(paren
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
op_plus
id
op_plus
l_string
)paren
suffix:semicolon
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
r_try
(brace
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
)brace
r_catch
(paren
id
id
)paren
(brace
id
dot
id
c_func
(paren
l_string
op_plus
id
dot
id
c_func
(paren
)paren
op_plus
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_int
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
op_plus
id
op_plus
l_string
)paren
suffix:semicolon
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id
)paren
(brace
id
id
op_assign
l_string
op_plus
id
op_plus
l_string
suffix:semicolon
r_try
(brace
id
op_assign
r_new
id
c_func
(paren
id
)paren
suffix:semicolon
id
op_assign
r_new
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
r_catch
(paren
id
id
)paren
(brace
id
dot
id
c_func
(paren
l_string
op_plus
id
op_plus
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_int
)paren
suffix:semicolon
)brace
id
dot
id
c_func
(paren
l_string
op_plus
id
op_plus
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
)brace
)brace
)def_block
(def_block
r_void
id
c_func
(paren
id
id
)paren
(brace
id
dot
id
c_func
(paren
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
)brace
)def_block
)brace
)def_block
eof
(def_block
r_class
id
(brace
(def_block
r_void
id
c_func
(paren
id
id
(braket
)braket
)paren
(brace
id
id
op_assign
r_new
id
c_func
(paren
)paren
suffix:semicolon
id
id
op_assign
l_string
suffix:semicolon
id
id
op_assign
l_string
suffix:semicolon
id
id
op_assign
r_new
id
c_func
(paren
id
op_plus
l_string
)paren
suffix:semicolon
id
id
op_assign
r_new
id
c_func
(paren
id
op_plus
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
id
op_assign
l_string
suffix:semicolon
id
id
op_assign
r_null
suffix:semicolon
r_for
c_loop
(paren
r_int
id
op_assign
l_int
suffix:semicolon
id
OL
l_int
suffix:semicolon
id
op_increment
)paren
(brace
id
op_assign
l_int
suffix:semicolon
id
op_assign
l_string
op_plus
id
suffix:semicolon
r_if
c_cond
(paren
id
dot
m_length
op_eq
l_int
)paren
(brace
id
op_assign
l_string
op_plus
id
suffix:semicolon
)brace
id
op_assign
r_new
id
c_func
(paren
id
op_plus
id
op_plus
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
op_plus
id
dot
id
c_func
(paren
)paren
)paren
suffix:semicolon
id
c_func
(paren
id
comma
id
)paren
suffix:semicolon
id
id
op_assign
l_string
suffix:semicolon
r_if
c_cond
(paren
id
op_eq
id
)paren
(brace
id
dot
id
c_func
(paren
l_string
op_plus
id
dot
m_length
op_plus
l_string
)paren
suffix:semicolon
id
op_assign
l_string
suffix:semicolon
r_while
c_loop
(paren
id
dot
m_length
OG
l_int
)paren
(brace
id
id
op_assign
id
dot
id
c_func
(paren
l_int
)paren
suffix:semicolon
id
op_add_assign
l_string
op_plus
id
op_plus
l_string
suffix:semicolon
id
dot
id
c_func
(paren
l_string
op_plus
id
op_plus
l_string
)paren
suffix:semicolon
)brace
)brace
id
op_add_assign
l_string
suffix:semicolon
id
dot
id
c_func
(paren
l_string
op_plus
id
dot
m_length
op_plus
l_string
)paren
suffix:semicolon
id
id
op_assign
r_new
id
c_func
(paren
id
op_plus
l_string
op_plus
id
op_plus
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
)paren
suffix:semicolon
id
dot
id
c_func
(paren
)paren
suffix:semicolon
)brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
)paren
suffix:semicolon
id
dot
id
c_func
(paren
)paren
suffix:semicolon
)brace
)def_block
(def_block
r_void
id
c_func
(paren
)paren
(brace
id
op_add_assign
l_string
suffix:semicolon
id
op_assign
l_string
op_plus
id
suffix:semicolon
)brace
)def_block
(def_block
r_void
id
c_func
(paren
)paren
(brace
id
op_add_assign
l_string
suffix:semicolon
id
op_assign
l_string
op_plus
id
suffix:semicolon
id
op_assign
l_bool
suffix:semicolon
)brace
)def_block
(def_block
r_void
id
c_func
(paren
)paren
(brace
id
op_add_assign
l_string
suffix:semicolon
id
op_assign
l_string
op_plus
id
suffix:semicolon
)brace
)def_block
(def_block
r_void
id
c_func
(paren
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id
dot
id
c_func
(paren
l_string
)paren
)paren
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id
dot
m_length
OG
l_int
)paren
(brace
id
op_assign
id
dot
id
c_func
(paren
l_int
comma
id
dot
m_length
l_int
)paren
suffix:semicolon
)brace
r_else
(brace
id
op_assign
l_string
suffix:semicolon
)brace
r_if
c_cond
(paren
id
dot
m_length
OG
l_int
)paren
(brace
id
op_assign
id
dot
id
c_func
(paren
l_int
)paren
suffix:semicolon
)brace
r_else
(brace
id
op_assign
l_string
suffix:semicolon
)brace
)brace
)def_block
(def_block
r_void
id
c_func
(paren
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id
dot
id
c_func
(paren
l_string
)paren
)paren
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id
dot
m_length
OG
l_int
)paren
(brace
id
op_assign
id
dot
id
c_func
(paren
l_int
comma
id
dot
m_length
l_int
)paren
suffix:semicolon
)brace
r_else
(brace
id
op_assign
l_string
suffix:semicolon
)brace
r_if
c_cond
(paren
id
dot
m_length
OG
l_int
)paren
(brace
id
op_assign
id
dot
id
c_func
(paren
l_int
)paren
suffix:semicolon
)brace
r_else
(brace
id
op_assign
l_string
suffix:semicolon
)brace
id
op_assign
l_bool
suffix:semicolon
)brace
)def_block
(def_block
r_void
id
c_func
(paren
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id
dot
id
c_func
(paren
l_string
)paren
)paren
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id
dot
m_length
OG
l_int
)paren
(brace
id
op_assign
id
dot
id
c_func
(paren
l_int
comma
id
dot
m_length
l_int
)paren
suffix:semicolon
)brace
r_else
(brace
id
op_assign
l_string
suffix:semicolon
)brace
r_if
c_cond
(paren
id
dot
m_length
OG
l_int
)paren
(brace
id
op_assign
id
dot
id
c_func
(paren
l_int
)paren
suffix:semicolon
)brace
r_else
(brace
id
op_assign
l_string
suffix:semicolon
)brace
)brace
)def_block
(def_block
r_void
id
c_func
(paren
id
id
comma
id
id
)paren
(brace
id
id
op_assign
r_new
id
c_func
(paren
)paren
suffix:semicolon
id
id
op_assign
r_new
id
c_func
(paren
r_new
id
c_func
(paren
r_new
id
c_func
(paren
id
)paren
)paren
)paren
suffix:semicolon
r_int
id
op_assign
l_int
suffix:semicolon
r_int
id
op_assign
l_int
suffix:semicolon
r_char
id
op_assign
l_int
suffix:semicolon
r_boolean
id
op_assign
l_bool
suffix:semicolon
id
id
op_assign
l_string
suffix:semicolon
r_int
id
op_assign
l_int
suffix:semicolon
r_while
c_loop
(paren
(paren
id
op_assign
id
dot
id
c_func
(paren
)paren
)paren
op_ne
l_int
)paren
(brace
id
op_assign
(paren
r_char
)paren
id
suffix:semicolon
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
r_if
c_cond
(paren
id
c_func
(paren
id
comma
id
comma
id
)paren
)paren
(brace
r_continue
suffix:semicolon
)brace
r_if
c_cond
(paren
id
)paren
(brace
r_continue
suffix:semicolon
)brace
r_if
c_cond
(paren
op_logical_neg
id
c_func
(paren
id
)paren
)paren
(brace
r_continue
suffix:semicolon
)brace
r_if
c_cond
(paren
id
op_eq
l_char
)paren
(brace
r_if
c_cond
(paren
id
op_ne
l_int
)paren
(brace
id
op_increment
suffix:semicolon
)brace
r_if
c_cond
(paren
id
c_func
(paren
id
comma
id
)paren
)paren
(brace
id
op_assign
r_new
id
c_func
(paren
)paren
suffix:semicolon
)brace
id
dot
id
c_func
(paren
l_int
)paren
suffix:semicolon
id
op_assign
id
dot
id
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
r_if
c_cond
(paren
id
dot
id
c_func
(paren
l_string
)paren
op_eq
l_int
)paren
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
op_assign
l_int
suffix:semicolon
)brace
r_else
(brace
id
op_assign
l_int
suffix:semicolon
)brace
)brace
id
dot
id
c_func
(paren
)paren
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
id
op_eq
l_char
)paren
(brace
r_continue
suffix:semicolon
)brace
r_else
(brace
id
op_increment
suffix:semicolon
r_if
c_cond
(paren
id
op_eq
l_int
)paren
(brace
id
dot
id
c_func
(paren
l_int
)paren
suffix:semicolon
r_if
c_cond
(paren
(paren
id
op_assign
id
dot
id
c_func
(paren
)paren
)paren
op_eq
l_int
)paren
(brace
id
dot
id
c_func
(paren
)paren
suffix:semicolon
r_continue
suffix:semicolon
)brace
id
dot
id
c_func
(paren
)paren
suffix:semicolon
r_char
id
op_assign
(paren
r_char
)paren
id
suffix:semicolon
r_if
c_cond
(paren
id
op_eq
l_char
)paren
(brace
id
dot
id
c_func
(paren
(paren
r_char
)paren
id
dot
id
c_func
(paren
)paren
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id
op_ne
l_char
)paren
id
dot
id
c_func
(paren
l_char
)paren
suffix:semicolon
id
op_assign
l_int
suffix:semicolon
id
op_increment
suffix:semicolon
r_if
c_cond
(paren
id
c_func
(paren
id
comma
id
)paren
)paren
id
op_assign
r_new
id
c_func
(paren
)paren
suffix:semicolon
)brace
)brace
)brace
id
c_func
(paren
id
comma
id
)paren
suffix:semicolon
)brace
)def_block
(def_block
r_boolean
id
c_func
(paren
r_char
id
comma
id
id
comma
id
id
)paren
(brace
id
id
op_assign
l_string
suffix:semicolon
r_if
c_cond
(paren
id
op_ne
l_char
)paren
(brace
r_return
l_bool
suffix:semicolon
)brace
r_while
c_loop
(paren
(paren
id
op_assign
(paren
r_char
)paren
id
dot
id
c_func
(paren
)paren
)paren
op_ne
l_int
)paren
(brace
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
r_if
c_cond
(paren
id
op_ne
l_char
)paren
(brace
id
op_add_assign
id
suffix:semicolon
)brace
r_else
(brace
r_if
c_cond
(paren
id
dot
id
c_func
(paren
l_string
)paren
)paren
(brace
r_if
c_cond
(paren
id
dot
id
c_func
(paren
l_string
)paren
)paren
(brace
id
c_func
(paren
)paren
suffix:semicolon
id
op_assign
l_string
suffix:semicolon
)brace
r_if
c_cond
(paren
id
dot
id
c_func
(paren
l_string
)paren
)paren
(brace
id
c_func
(paren
)paren
suffix:semicolon
id
op_assign
l_string
suffix:semicolon
)brace
r_if
c_cond
(paren
id
dot
id
c_func
(paren
l_string
)paren
)paren
(brace
id
c_func
(paren
)paren
suffix:semicolon
id
op_assign
l_string
suffix:semicolon
)brace
)brace
r_else
r_if
c_cond
(paren
id
dot
id
c_func
(paren
l_string
)paren
)paren
(brace
id
c_func
(paren
)paren
suffix:semicolon
id
op_assign
l_string
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
id
dot
id
c_func
(paren
l_string
)paren
)paren
(brace
id
c_func
(paren
)paren
suffix:semicolon
id
op_assign
l_string
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
id
dot
id
c_func
(paren
l_string
)paren
)paren
(brace
id
c_func
(paren
)paren
suffix:semicolon
id
op_assign
l_string
suffix:semicolon
)brace
r_break
suffix:semicolon
)brace
)brace
r_return
l_bool
suffix:semicolon
)brace
)def_block
(def_block
r_boolean
id
c_func
(paren
id
id
comma
id
id
)paren
(brace
r_if
c_cond
(paren
id
op_eq
l_int
)paren
(brace
id
op_assign
l_int
suffix:semicolon
id
c_func
(paren
id
comma
id
)paren
suffix:semicolon
r_return
l_bool
suffix:semicolon
)brace
r_return
l_bool
suffix:semicolon
)brace
)def_block
(def_block
r_boolean
id
c_func
(paren
r_char
id
)paren
(brace
r_char
id
(braket
)braket
op_assign
initialization_block
suffix:semicolon
r_for
c_loop
(paren
r_char
id
suffix:colon
id
)paren
(brace
r_if
c_cond
(paren
id
op_eq
id
)paren
(brace
r_return
l_bool
suffix:semicolon
)brace
)brace
r_return
l_bool
suffix:semicolon
)brace
)def_block
(def_block
r_void
id
c_func
(paren
id
id
comma
id
id
)paren
(brace
id
id
op_assign
r_new
id
c_func
(paren
r_new
id
c_func
(paren
id
dot
m_toString
c_func
(paren
)paren
)paren
)paren
suffix:semicolon
id
id
op_assign
r_new
id
c_func
(paren
)paren
suffix:semicolon
id
id
op_assign
r_null
suffix:semicolon
r_int
(braket
)braket
(braket
)braket
id
suffix:semicolon
r_int
id
op_assign
l_int
suffix:semicolon
r_char
id
op_assign
l_int
suffix:semicolon
r_int
id
op_assign
l_int
suffix:semicolon
id
id
op_assign
l_string
op_plus
id
suffix:semicolon
id
op_assign
l_string
suffix:semicolon
r_while
c_loop
(paren
(paren
id
op_assign
id
dot
id
c_func
(paren
)paren
)paren
op_ne
r_null
)paren
(brace
id
op_add_assign
id
c_func
(paren
id
)paren
suffix:semicolon
id
op_assign
id
dot
id
c_func
(paren
l_string
comma
l_string
)paren
suffix:semicolon
id
op_assign
id
dot
id
c_func
(paren
l_string
comma
l_string
)paren
suffix:semicolon
id
op_assign
id
dot
id
c_func
(paren
l_string
comma
l_string
)paren
suffix:semicolon
id
op_assign
id
dot
id
c_func
(paren
l_string
comma
l_string
)paren
suffix:semicolon
id
op_assign
id
dot
id
c_func
(paren
l_string
comma
l_string
)paren
suffix:semicolon
id
op_assign
id
dot
id
c_func
(paren
l_string
comma
l_string
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id
dot
id
c_func
(paren
l_string
)paren
)paren
(brace
id
op_assign
id
dot
id
c_func
(paren
l_int
comma
id
dot
m_length
l_int
)paren
suffix:semicolon
)brace
r_else
r_if
c_cond
(paren
id
dot
id
c_func
(paren
l_string
)paren
)paren
(brace
id
op_assign
id
dot
id
c_func
(paren
l_int
comma
id
dot
m_length
l_int
)paren
suffix:semicolon
)brace
id
op_assign
id
c_func
(paren
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
op_plus
id
)paren
suffix:semicolon
r_if
c_cond
(paren
id
dot
m_length
OG
l_int
)paren
(brace
id
op_add_assign
id
suffix:semicolon
id
op_assign
id
c_func
(paren
)paren
suffix:semicolon
)brace
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
op_plus
id
dot
m_length
op_plus
l_string
op_plus
id
)paren
suffix:semicolon
)brace
)def_block
(def_block
id
id
c_func
(paren
id
id
)paren
(brace
id
id
op_assign
l_string
suffix:semicolon
r_for
c_loop
(paren
r_int
id
op_assign
l_int
suffix:semicolon
id
OL
id
dot
m_length
suffix:semicolon
id
op_increment
)paren
(brace
r_char
id
op_assign
id
dot
m_charAt
c_func
(paren
id
)paren
suffix:semicolon
r_if
c_cond
(paren
id
c_func
(paren
id
)paren
)paren
(brace
id
op_add_assign
id
suffix:semicolon
)brace
)brace
r_if
c_cond
(paren
id
)paren
(brace
r_return
id
op_plus
l_string
suffix:semicolon
)brace
r_else
(brace
r_return
id
op_plus
l_string
suffix:semicolon
)brace
)brace
)def_block
)brace
)def_block
eof
(def_block
r_class
id
(brace
(def_block
id
c_func
(paren
)paren
(brace
id
c_func
(paren
l_bool
comma
l_bool
comma
l_bool
comma
l_bool
comma
l_int
comma
l_string
comma
l_int
comma
l_string
comma
l_int
comma
l_int
comma
l_int
comma
l_int
comma
l_int
comma
l_int
comma
l_int
comma
l_bool
)paren
suffix:semicolon
)brace
)def_block
(def_block
id
c_func
(paren
r_boolean
id
comma
r_boolean
id
comma
r_boolean
id
comma
r_boolean
id
comma
r_int
id
comma
id
id
comma
r_int
id
comma
id
id
comma
r_int
id
comma
r_int
id
comma
r_int
id
comma
r_int
id
comma
r_int
id
comma
r_int
id
comma
r_int
id
comma
r_boolean
id
)paren
(brace
id
op_assign
id
suffix:semicolon
id
op_assign
id
suffix:semicolon
id
op_assign
id
suffix:semicolon
id
op_assign
id
suffix:semicolon
id
op_assign
id
suffix:semicolon
id
c_func
(paren
id
)paren
suffix:semicolon
id
op_assign
id
suffix:semicolon
id
op_assign
id
suffix:semicolon
id
op_assign
id
suffix:semicolon
id
op_assign
id
suffix:semicolon
id
op_assign
id
suffix:semicolon
id
op_assign
id
suffix:semicolon
id
c_func
(paren
id
)paren
suffix:semicolon
id
c_func
(paren
id
)paren
suffix:semicolon
id
op_assign
id
suffix:semicolon
id
op_assign
id
suffix:semicolon
)brace
)def_block
(def_block
id
m_toString
c_func
(paren
)paren
(brace
r_return
l_string
op_plus
id
op_plus
l_string
op_plus
id
op_plus
l_string
op_plus
id
c_func
(paren
)paren
op_plus
l_string
op_plus
id
c_func
(paren
)paren
op_plus
l_string
op_plus
id
c_func
(paren
)paren
op_plus
l_string
op_plus
id
c_func
(paren
)paren
op_plus
l_string
op_plus
id
op_plus
l_string
op_plus
id
op_plus
l_string
op_plus
id
op_plus
l_string
op_plus
id
c_func
(paren
)paren
op_plus
l_string
op_plus
id
dot
id
c_func
(paren
)paren
suffix:semicolon
)brace
)def_block
(def_block
r_void
id
c_func
(paren
id
id
)paren
(brace
id
id
suffix:semicolon
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
id
op_assign
id
c_func
(paren
)paren
suffix:semicolon
)brace
r_else
(brace
id
op_assign
l_string
suffix:semicolon
)brace
id
(braket
)braket
id
op_assign
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
r_int
id
(braket
)braket
op_assign
r_new
r_int
(braket
l_int
)braket
suffix:semicolon
r_boolean
id
op_assign
l_bool
suffix:semicolon
r_if
c_cond
(paren
id
dot
m_length
OL
l_int
op_logical_or
id
dot
m_length
OG
l_int
)paren
(brace
id
op_assign
l_bool
suffix:semicolon
)brace
r_for
c_loop
(paren
r_int
id
op_assign
l_int
suffix:semicolon
id
OL
id
dot
m_length
suffix:semicolon
id
op_increment
)paren
(brace
r_try
(brace
id
(braket
id
)braket
op_assign
id
dot
id
c_func
(paren
id
(braket
id
)braket
)paren
suffix:semicolon
r_if
c_cond
(paren
id
(braket
id
)braket
OL
l_int
op_logical_or
id
(braket
id
)braket
OG
l_int
)paren
(brace
id
op_assign
l_bool
suffix:semicolon
id
(braket
id
)braket
op_assign
l_int
suffix:semicolon
)brace
)brace
r_catch
(paren
id
id
)paren
(brace
id
op_assign
l_bool
suffix:semicolon
)brace
)brace
r_if
c_cond
(paren
op_logical_neg
id
)paren
(brace
id
op_assign
id
suffix:semicolon
)brace
r_else
(brace
id
op_assign
id
suffix:semicolon
)brace
)brace
)def_block
(def_block
r_void
id
c_func
(paren
r_int
id
)paren
(brace
id
op_assign
id
suffix:semicolon
id
op_assign
id
op_plus
l_int
suffix:semicolon
)brace
)def_block
(def_block
r_void
id
c_func
(paren
r_int
id
)paren
(brace
id
op_assign
id
suffix:semicolon
id
op_assign
id
op_plus
l_int
suffix:semicolon
)brace
)def_block
(def_block
r_void
id
c_func
(paren
r_int
id
)paren
(brace
id
op_assign
id
suffix:semicolon
r_switch
c_cond
(paren
id
)paren
(brace
r_case
l_int
suffix:colon
r_case
l_int
suffix:colon
r_case
l_int
suffix:colon
(brace
id
op_assign
id
suffix:semicolon
)brace
r_case
l_int
suffix:colon
(brace
id
op_assign
l_int
suffix:semicolon
)brace
r_case
l_int
suffix:colon
(brace
id
op_assign
l_int
suffix:semicolon
)brace
)brace
)brace
)def_block
)brace
)def_block
eof
(def_block
r_class
id
(brace
(def_block
id
c_func
(paren
id
id
)paren
(brace
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
)def_block
)brace
)def_block
eof
(def_block
r_class
id
(brace
(def_block
id
id
c_func
(paren
)paren
(brace
r_return
l_string
suffix:semicolon
)brace
)def_block
(def_block
id
id
c_func
(paren
)paren
(brace
r_return
l_string
suffix:semicolon
)brace
)def_block
(def_block
id
id
c_func
(paren
id
id
)paren
(brace
id
id
op_assign
id
suffix:semicolon
id
id
suffix:semicolon
id
id
op_assign
id
dot
id
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id
op_eq
r_null
)paren
(brace
r_return
id
suffix:semicolon
)brace
id
op_assign
id
dot
id
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
id
op_assign
id
c_func
(paren
id
)paren
suffix:semicolon
id
op_assign
id
dot
id
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
(paren
id
op_ne
r_null
)paren
op_logical_and
(paren
id
dot
m_compareTo
c_func
(paren
id
dot
id
c_func
(paren
)paren
)paren
OL
l_int
)paren
)paren
(brace
id
op_assign
id
suffix:semicolon
)brace
)brace
id
op_assign
id
dot
id
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
id
op_assign
id
c_func
(paren
id
)paren
suffix:semicolon
id
op_assign
id
dot
id
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
(paren
id
op_ne
r_null
)paren
op_logical_and
(paren
id
dot
m_compareTo
c_func
(paren
id
dot
id
c_func
(paren
)paren
)paren
OL
l_int
)paren
)paren
(brace
id
op_assign
id
suffix:semicolon
)brace
)brace
r_return
id
suffix:semicolon
)brace
)def_block
(def_block
r_boolean
id
c_func
(paren
)paren
(brace
r_return
l_bool
suffix:semicolon
)brace
)def_block
(def_block
id
id
c_func
(paren
)paren
(brace
r_return
l_string
suffix:semicolon
)brace
)def_block
(def_block
r_boolean
id
c_func
(paren
)paren
(brace
r_return
l_bool
suffix:semicolon
)brace
)def_block
(def_block
r_boolean
id
c_func
(paren
id
id
comma
id
id
)paren
(brace
id
id
op_assign
id
dot
id
c_func
(paren
l_string
comma
r_new
id
(braket
l_int
)braket
comma
l_string
)paren
suffix:semicolon
r_if
c_cond
(paren
(paren
id
op_eq
r_null
)paren
op_logical_or
(paren
id
dot
m_length
op_eq
l_int
)paren
)paren
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
r_return
l_bool
suffix:semicolon
)brace
id
op_assign
l_string
op_plus
id
suffix:semicolon
id
id
op_assign
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
id
suffix:semicolon
r_try
(brace
id
op_assign
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
r_catch
(paren
id
id
)paren
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
r_return
l_bool
suffix:semicolon
)brace
r_if
c_cond
(paren
id
op_eq
r_null
)paren
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
)brace
r_else
(brace
id
dot
id
c_func
(paren
l_string
op_plus
id
op_plus
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
op_plus
id
op_plus
l_string
op_plus
id
dot
id
c_func
(paren
)paren
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
op_plus
id
dot
id
c_func
(paren
)paren
op_plus
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
op_plus
id
c_func
(paren
id
)paren
dot
id
c_func
(paren
)paren
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
)brace
r_return
l_bool
suffix:semicolon
)brace
)def_block
)brace
)def_block
eof
(def_block
r_class
id
(brace
(def_block
id
c_func
(paren
id
id
comma
id
id
comma
id
id
comma
id
id
comma
id
id
)paren
(brace
id
c_func
(paren
id
comma
id
comma
id
comma
id
comma
id
)paren
suffix:semicolon
id
id
op_assign
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
r_if
c_cond
(paren
id
dot
id
c_func
(paren
)paren
)paren
(brace
id
c_func
(paren
id
dot
id
c_func
(paren
l_int
)paren
)paren
suffix:semicolon
id
id
op_assign
id
dot
id
c_func
(paren
l_int
)paren
suffix:semicolon
r_if
c_cond
(paren
id
r_instanceof
id
)paren
(brace
id
op_assign
(paren
(paren
id
)paren
id
)paren
dot
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id
op_eq
r_null
)paren
(brace
id
op_assign
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
)brace
)brace
)def_block
(def_block
id
c_func
(paren
id
id
comma
id
id
comma
id
id
comma
id
id
comma
id
id
comma
id
id
comma
id
id
)paren
(brace
id
c_func
(paren
id
comma
id
comma
id
comma
id
comma
id
)paren
suffix:semicolon
id
op_assign
id
suffix:semicolon
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
)def_block
(def_block
id
id
c_func
(paren
)paren
(brace
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
r_return
id
dot
id
c_func
(paren
)paren
suffix:semicolon
)brace
r_else
(brace
r_return
r_null
suffix:semicolon
)brace
)brace
)def_block
(def_block
r_void
id
c_func
(paren
id
id
comma
id
id
comma
id
(braket
)braket
id
)paren
(brace
r_for
c_loop
(paren
r_int
id
op_assign
l_int
suffix:semicolon
id
OL
id
dot
m_length
suffix:semicolon
id
op_increment
)paren
(brace
id
dot
id
c_func
(paren
id
comma
id
op_plus
l_char
op_plus
id
op_plus
l_string
comma
id
(braket
id
)braket
dot
id
c_func
(paren
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id
(braket
id
)braket
dot
id
c_func
(paren
)paren
op_ne
r_null
)paren
(brace
id
(braket
id
)braket
dot
id
c_func
(paren
)paren
dot
id
c_func
(paren
id
comma
id
op_plus
l_string
op_plus
id
op_plus
l_string
)paren
suffix:semicolon
)brace
)brace
)brace
)def_block
)brace
)def_block
eof
(def_block
r_class
id
(brace
(def_block
id
c_func
(paren
id
id
comma
id
id
)paren
(brace
id
op_assign
id
suffix:semicolon
id
op_assign
id
suffix:semicolon
)brace
)def_block
(def_block
r_void
id
c_func
(paren
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id
dot
id
c_func
(paren
id
)paren
)paren
(brace
r_for
c_loop
(paren
r_int
id
op_assign
id
dot
id
c_func
(paren
id
dot
id
c_func
(paren
)paren
op_minus
l_int
)paren
suffix:semicolon
id
OL
id
dot
id
c_func
(paren
id
dot
id
c_func
(paren
)paren
)paren
op_minus
l_int
suffix:semicolon
id
op_increment
)paren
(brace
id
dot
id
c_func
(paren
id
dot
id
c_func
(paren
id
)paren
comma
id
dot
id
c_func
(paren
id
)paren
)paren
suffix:semicolon
)brace
)brace
id
dot
id
c_func
(paren
id
dot
id
c_func
(paren
)paren
comma
id
dot
id
c_func
(paren
)paren
)paren
suffix:semicolon
r_for
c_loop
(paren
r_int
id
op_assign
l_int
suffix:semicolon
id
OL
id
dot
id
c_func
(paren
)paren
suffix:semicolon
id
op_increment
)paren
(brace
id
dot
id
c_func
(paren
id
dot
id
c_func
(paren
id
)paren
comma
id
dot
id
c_func
(paren
id
)paren
comma
id
dot
id
c_func
(paren
id
)paren
)paren
suffix:semicolon
)brace
)brace
)def_block
(def_block
r_void
id
c_func
(paren
)paren
(brace
r_switch
c_cond
(paren
id
dot
id
c_func
(paren
)paren
)paren
(brace
r_case
id
suffix:colon
(brace
)brace
r_case
id
suffix:colon
(brace
id
dot
id
c_func
(paren
)paren
suffix:semicolon
)brace
r_case
id
suffix:colon
(brace
id
c_func
(paren
)paren
suffix:semicolon
)brace
r_case
id
suffix:colon
(brace
id
dot
id
c_func
(paren
id
dot
id
c_func
(paren
)paren
comma
id
dot
id
c_func
(paren
)paren
)paren
suffix:semicolon
)brace
r_case
id
suffix:colon
(brace
id
dot
id
c_func
(paren
id
dot
id
c_func
(paren
)paren
)paren
suffix:semicolon
)brace
r_case
id
suffix:colon
(brace
id
dot
id
c_func
(paren
id
dot
id
c_func
(paren
)paren
)paren
suffix:semicolon
)brace
r_case
id
suffix:colon
(brace
id
dot
id
c_func
(paren
id
dot
id
c_func
(paren
)paren
)paren
suffix:semicolon
)brace
r_case
id
suffix:colon
(brace
id
dot
id
c_func
(paren
id
dot
id
c_func
(paren
)paren
)paren
suffix:semicolon
)brace
r_case
id
suffix:colon
(brace
id
dot
id
c_func
(paren
id
dot
id
c_func
(paren
)paren
)paren
suffix:semicolon
)brace
r_case
id
suffix:colon
(brace
id
dot
id
c_func
(paren
id
dot
id
c_func
(paren
)paren
)paren
suffix:semicolon
)brace
r_case
id
suffix:colon
(brace
id
dot
id
c_func
(paren
id
dot
id
c_func
(paren
)paren
)paren
suffix:semicolon
)brace
r_default
suffix:colon
(brace
r_throw
r_new
id
c_func
(paren
l_string
op_plus
id
dot
id
c_func
(paren
)paren
)paren
suffix:semicolon
)brace
)brace
)brace
)def_block
(def_block
r_void
id
c_func
(paren
)paren
(brace
r_while
c_loop
(paren
id
dot
id
c_func
(paren
)paren
op_ne
id
)paren
(brace
id
c_func
(paren
)paren
suffix:semicolon
id
dot
id
c_func
(paren
)paren
suffix:semicolon
)brace
id
c_func
(paren
)paren
suffix:semicolon
)brace
)def_block
(def_block
r_void
id
c_func
(paren
id
(braket
)braket
id
)paren
(brace
r_if
c_cond
(paren
id
dot
m_length
op_eq
l_int
)paren
(brace
r_throw
r_new
id
c_func
(paren
l_string
)paren
suffix:semicolon
)brace
r_for
c_loop
(paren
r_int
id
op_assign
l_int
suffix:semicolon
id
OL
id
dot
m_length
suffix:semicolon
id
op_increment
)paren
(brace
id
dot
id
c_func
(paren
l_string
op_plus
id
(braket
id
)braket
)paren
suffix:semicolon
id
id
op_assign
r_new
id
c_func
(paren
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
comma
l_bool
)paren
suffix:semicolon
id
id
op_assign
r_new
id
c_func
(paren
)paren
suffix:semicolon
id
dot
id
c_func
(paren
r_new
id
c_func
(paren
id
(braket
id
)braket
)paren
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
comma
r_null
)paren
suffix:semicolon
(paren
r_new
id
c_func
(paren
id
comma
id
)paren
)paren
dot
id
c_func
(paren
)paren
suffix:semicolon
id
dot
id
c_func
(paren
)paren
suffix:semicolon
)brace
)brace
)def_block
)brace
)def_block
eof
r_class
id
(brace
(def_block
id
c_func
(paren
)paren
(brace
suffix:semicolon
)brace
)def_block
(def_block
id
c_func
(paren
id
id
)paren
(brace
id
c_func
(paren
id
comma
r_new
id
c_func
(paren
)paren
)paren
suffix:semicolon
)brace
)def_block
(def_block
id
c_func
(paren
id
id
comma
id
id
)paren
(brace
id
c_func
(paren
id
comma
id
)paren
suffix:semicolon
)brace
)def_block
(def_block
id
id
c_func
(paren
)paren
(brace
r_return
l_string
suffix:semicolon
)brace
)def_block
(def_block
r_void
id
c_func
(paren
)paren
(brace
r_try
(brace
r_int
id
op_assign
id
suffix:semicolon
r_int
id
op_assign
id
suffix:semicolon
(brace
id
c_func
(paren
l_string
)paren
suffix:semicolon
)brace
id
op_assign
id
suffix:semicolon
id
op_assign
id
suffix:semicolon
)brace
r_finally
(brace
)brace
)brace
)def_block
(def_block
r_void
id
c_func
(paren
)paren
(brace
r_try
(brace
r_int
id
op_assign
id
suffix:semicolon
r_int
id
op_assign
id
suffix:semicolon
(brace
id
c_func
(paren
l_char
)paren
suffix:semicolon
)brace
id
op_assign
id
suffix:semicolon
id
op_assign
id
suffix:semicolon
)brace
r_finally
(brace
)brace
)brace
)def_block
(def_block
r_void
id
c_func
(paren
)paren
(brace
r_try
(brace
r_int
id
op_assign
id
suffix:semicolon
r_int
id
op_assign
id
suffix:semicolon
(brace
id
c_func
(paren
l_char
)paren
suffix:semicolon
)brace
id
op_assign
id
suffix:semicolon
id
op_assign
id
suffix:semicolon
)brace
r_finally
(brace
)brace
)brace
)def_block
(def_block
r_void
id
c_func
(paren
)paren
(brace
r_try
(brace
r_int
id
op_assign
id
suffix:semicolon
r_int
id
op_assign
id
suffix:semicolon
(brace
id
c_func
(paren
l_char
)paren
suffix:semicolon
)brace
id
op_assign
id
suffix:semicolon
id
op_assign
id
suffix:semicolon
)brace
r_finally
(brace
)brace
)brace
)def_block
(def_block
r_void
id
c_func
(paren
)paren
(brace
r_try
(brace
r_int
id
op_assign
id
suffix:semicolon
r_int
id
op_assign
id
suffix:semicolon
(brace
id
c_func
(paren
l_char
)paren
suffix:semicolon
)brace
id
op_assign
id
suffix:semicolon
id
op_assign
id
suffix:semicolon
)brace
r_finally
(brace
)brace
)brace
)def_block
(def_block
r_void
id
c_func
(paren
)paren
(brace
r_try
(brace
r_int
id
op_assign
id
suffix:semicolon
r_int
id
op_assign
id
suffix:semicolon
(brace
id
c_func
(paren
l_char
)paren
suffix:semicolon
)brace
id
op_assign
id
suffix:semicolon
id
op_assign
id
suffix:semicolon
)brace
r_finally
(brace
)brace
)brace
)def_block
(def_block
r_void
id
c_func
(paren
)paren
(brace
r_try
(brace
r_int
id
op_assign
id
suffix:semicolon
r_int
id
op_assign
id
suffix:semicolon
(brace
id
c_func
(paren
l_char
)paren
suffix:semicolon
)brace
id
op_assign
id
suffix:semicolon
id
op_assign
id
suffix:semicolon
)brace
r_finally
(brace
)brace
)brace
)def_block
(def_block
r_void
id
c_func
(paren
)paren
(brace
r_try
(brace
r_int
id
op_assign
id
suffix:semicolon
r_int
id
op_assign
id
suffix:semicolon
(brace
id
c_func
(paren
l_char
)paren
suffix:semicolon
)brace
id
op_assign
id
suffix:semicolon
id
op_assign
id
suffix:semicolon
)brace
r_finally
(brace
)brace
)brace
)def_block
(def_block
r_void
id
c_func
(paren
)paren
(brace
r_try
(brace
r_int
id
op_assign
id
suffix:semicolon
r_int
id
op_assign
id
suffix:semicolon
(brace
id
c_func
(paren
l_char
)paren
suffix:semicolon
)brace
id
op_assign
id
suffix:semicolon
id
op_assign
id
suffix:semicolon
)brace
r_finally
(brace
)brace
)brace
)def_block
(def_block
r_void
id
c_func
(paren
)paren
(brace
r_try
(brace
r_int
id
op_assign
id
suffix:semicolon
r_int
id
op_assign
id
suffix:semicolon
(brace
r_int
id
op_assign
l_int
suffix:semicolon
id
suffix:colon
r_do
(brace
r_int
id
op_assign
l_int
suffix:semicolon
r_int
id
op_assign
id
dot
id
c_func
(paren
l_int
)paren
suffix:semicolon
r_if
c_cond
(paren
(paren
(paren
id
op_ge
l_char
op_logical_and
id
op_le
l_char
)paren
op_logical_or
(paren
id
op_ge
l_char
op_logical_and
id
op_le
l_char
)paren
)paren
)paren
(brace
id
op_assign
l_int
suffix:semicolon
)brace
r_switch
c_cond
(paren
id
)paren
(brace
r_case
l_int
suffix:colon
(brace
r_if
c_cond
(paren
(paren
id
dot
id
c_func
(paren
l_int
)paren
op_ge
l_char
op_logical_and
id
dot
id
c_func
(paren
l_int
)paren
op_le
l_char
)paren
op_logical_or
(paren
id
dot
id
c_func
(paren
l_int
)paren
op_ge
l_char
op_logical_and
id
dot
id
c_func
(paren
l_int
)paren
op_le
l_char
)paren
)paren
(brace
id
dot
id
c_func
(paren
)paren
suffix:semicolon
)brace
r_else
(brace
id
id
op_assign
r_new
id
c_func
(paren
r_null
comma
id
)paren
suffix:semicolon
id
c_func
(paren
id
)paren
suffix:semicolon
r_throw
id
suffix:semicolon
)brace
)brace
r_default
suffix:colon
(brace
r_if
c_cond
(paren
id
op_ge
l_int
)paren
(brace
r_break
id
suffix:semicolon
)brace
id
id
op_assign
r_new
id
c_func
(paren
l_int
comma
id
)paren
suffix:semicolon
r_throw
id
suffix:semicolon
)brace
)brace
id
op_increment
suffix:semicolon
)brace
r_while
c_loop
(paren
l_bool
)paren
suffix:semicolon
)brace
id
op_assign
id
suffix:semicolon
id
op_assign
id
suffix:semicolon
)brace
r_finally
(brace
)brace
)brace
)def_block
(def_block
r_void
id
c_func
(paren
)paren
(brace
r_try
(brace
r_int
id
op_assign
id
suffix:semicolon
r_int
id
op_assign
id
suffix:semicolon
(brace
r_int
id
op_assign
l_int
suffix:semicolon
id
suffix:colon
r_do
(brace
r_int
id
op_assign
l_int
suffix:semicolon
r_int
id
op_assign
id
dot
id
c_func
(paren
l_int
)paren
suffix:semicolon
r_if
c_cond
(paren
(paren
(paren
id
op_ge
l_char
op_logical_and
id
op_le
l_char
)paren
)paren
)paren
(brace
id
op_assign
l_int
suffix:semicolon
)brace
r_switch
c_cond
(paren
id
)paren
(brace
r_case
l_int
suffix:colon
(brace
id
c_func
(paren
l_char
comma
l_char
)paren
suffix:semicolon
)brace
r_default
suffix:colon
(brace
r_if
c_cond
(paren
id
op_ge
l_int
)paren
(brace
r_break
id
suffix:semicolon
)brace
id
id
op_assign
r_new
id
c_func
(paren
l_int
comma
id
)paren
suffix:semicolon
r_throw
id
suffix:semicolon
)brace
)brace
id
op_increment
suffix:semicolon
)brace
r_while
c_loop
(paren
l_bool
)paren
suffix:semicolon
)brace
id
op_assign
id
suffix:semicolon
id
op_assign
id
suffix:semicolon
)brace
r_finally
(brace
)brace
)brace
)def_block
(def_block
r_void
id
c_func
(paren
)paren
(brace
r_try
(brace
r_int
id
op_assign
id
suffix:semicolon
r_int
id
op_assign
id
suffix:semicolon
(brace
r_int
id
op_assign
l_int
suffix:semicolon
id
suffix:colon
r_do
(brace
r_int
id
op_assign
l_int
suffix:semicolon
r_int
id
op_assign
id
dot
id
c_func
(paren
l_int
)paren
suffix:semicolon
r_if
c_cond
(paren
(paren
(paren
id
op_ge
l_char
op_logical_and
id
op_le
l_char
)paren
op_logical_or
id
op_eq
l_char
)paren
)paren
(brace
id
op_assign
l_int
suffix:semicolon
)brace
r_switch
c_cond
(paren
id
)paren
(brace
r_case
l_int
suffix:colon
(brace
r_if
c_cond
(paren
(paren
id
dot
id
c_func
(paren
l_int
)paren
op_ge
l_char
op_logical_and
id
dot
id
c_func
(paren
l_int
)paren
op_le
l_char
)paren
op_logical_or
id
dot
id
c_func
(paren
l_int
)paren
op_eq
l_char
)paren
(brace
id
dot
id
c_func
(paren
)paren
suffix:semicolon
)brace
r_else
(brace
id
id
op_assign
r_new
id
c_func
(paren
r_null
comma
id
)paren
suffix:semicolon
id
c_func
(paren
id
)paren
suffix:semicolon
r_throw
id
suffix:semicolon
)brace
)brace
r_default
suffix:colon
(brace
r_if
c_cond
(paren
id
op_ge
l_int
)paren
(brace
r_break
id
suffix:semicolon
)brace
id
id
op_assign
r_new
id
c_func
(paren
l_int
comma
id
)paren
suffix:semicolon
r_throw
id
suffix:semicolon
)brace
)brace
id
op_increment
suffix:semicolon
)brace
r_while
c_loop
(paren
l_bool
)paren
suffix:semicolon
id
op_assign
id
suffix:semicolon
)brace
id
op_assign
id
suffix:semicolon
id
op_assign
id
suffix:semicolon
)brace
r_finally
(brace
)brace
)brace
)def_block
(def_block
r_void
id
c_func
(paren
)paren
(brace
r_int
id
op_assign
l_int
suffix:semicolon
id
op_assign
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
r_switch
c_cond
(paren
id
)paren
(brace
r_case
l_int
suffix:colon
(brace
id
c_func
(paren
)paren
suffix:semicolon
)brace
r_case
l_int
suffix:colon
(brace
id
c_func
(paren
)paren
suffix:semicolon
)brace
r_case
l_int
suffix:colon
(brace
id
c_func
(paren
)paren
suffix:semicolon
)brace
r_case
l_int
suffix:colon
(brace
id
c_func
(paren
)paren
suffix:semicolon
)brace
r_case
l_int
suffix:colon
(brace
id
c_func
(paren
)paren
suffix:semicolon
)brace
r_case
l_int
suffix:colon
(brace
id
c_func
(paren
)paren
suffix:semicolon
)brace
r_case
l_int
suffix:colon
(brace
id
c_func
(paren
)paren
suffix:semicolon
)brace
r_case
l_int
suffix:colon
(brace
id
c_func
(paren
)paren
suffix:semicolon
)brace
r_case
l_int
suffix:colon
(brace
id
c_func
(paren
)paren
suffix:semicolon
)brace
r_case
l_int
suffix:colon
(brace
id
c_func
(paren
)paren
suffix:semicolon
)brace
r_case
l_int
suffix:colon
(brace
id
c_func
(paren
)paren
suffix:semicolon
)brace
r_case
l_int
suffix:colon
(brace
id
c_func
(paren
)paren
suffix:semicolon
)brace
)brace
)brace
)def_block
id
id
op_assign
"&quot;&bslash;"
l_int
eof
(def_block
r_class
id
(brace
(def_block
r_double
id
c_func
(paren
r_double
id
)paren
(brace
r_return
id
c_func
(paren
id
op_star
id
)paren
suffix:semicolon
)brace
)def_block
)brace
)def_block
eof
(def_block
r_class
id
(brace
(def_block
r_void
id
c_func
(paren
r_int
id
)paren
(brace
id
op_assign
id
dot
id
c_func
(paren
l_int
comma
id
)paren
suffix:semicolon
)brace
)def_block
(def_block
id
id
c_func
(paren
id
id
)paren
(brace
id
id
op_assign
r_new
id
c_func
(paren
id
c_func
(paren
l_string
comma
id
dot
id
c_func
(paren
)paren
)paren
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
c_func
(paren
l_string
)paren
op_plus
l_string
op_plus
id
dot
id
c_func
(paren
)paren
)paren
suffix:semicolon
id
id
op_assign
r_null
suffix:semicolon
r_try
(brace
r_if
c_cond
(paren
id
dot
m_length
OG
l_int
)paren
(brace
id
op_assign
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
)brace
r_catch
(paren
id
id
)paren
(brace
id
c_func
(paren
l_string
op_plus
id
dot
id
c_func
(paren
)paren
op_plus
l_string
)paren
suffix:semicolon
)brace
id
c_func
(paren
id
dot
id
c_func
(paren
id
comma
l_string
)paren
comma
id
comma
id
)paren
suffix:semicolon
id
c_func
(paren
id
dot
id
c_func
(paren
id
comma
l_string
)paren
comma
id
comma
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
)paren
suffix:semicolon
r_return
id
suffix:semicolon
)brace
)def_block
(def_block
r_void
id
c_func
(paren
id
(braket
)braket
id
comma
id
id
comma
id
id
)paren
(brace
r_for
c_loop
(paren
r_int
id
op_assign
l_int
suffix:semicolon
id
OL
id
dot
m_length
suffix:semicolon
id
op_increment
)paren
(brace
id
c_func
(paren
id
(braket
id
)braket
comma
id
comma
id
)paren
suffix:semicolon
)brace
)brace
)def_block
(def_block
r_void
id
c_func
(paren
id
id
comma
id
id
comma
id
id
)paren
(brace
id
c_func
(paren
id
c_func
(paren
l_string
comma
id
dot
m_toString
c_func
(paren
)paren
)paren
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
dot
m_toString
c_func
(paren
id
)paren
comma
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
c_func
(paren
id
comma
id
comma
id
comma
l_int
)paren
suffix:semicolon
id
dot
id
c_func
(paren
)paren
suffix:semicolon
id
(braket
)braket
id
op_assign
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
r_for
c_loop
(paren
r_int
id
op_assign
l_int
suffix:semicolon
id
OL
id
dot
m_length
op_logical_and
id
OL
id
suffix:semicolon
id
op_increment
)paren
(brace
id
id
op_assign
(paren
id
)paren
id
(braket
id
)braket
suffix:semicolon
id
dot
id
c_func
(paren
id
dot
id
c_func
(paren
)paren
comma
l_string
)paren
suffix:semicolon
)brace
id
dot
id
c_func
(paren
)paren
suffix:semicolon
)brace
)def_block
(def_block
r_void
id
c_func
(paren
id
id
comma
id
id
comma
id
id
comma
r_int
id
)paren
(brace
r_if
c_cond
(paren
id
dot
id
c_func
(paren
)paren
op_eq
l_int
)paren
(brace
r_return
suffix:semicolon
)brace
id
dot
id
c_func
(paren
)paren
suffix:semicolon
id
(braket
)braket
id
op_assign
id
dot
id
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id
)paren
(brace
id
dot
id
c_func
(paren
id
comma
(def_block
r_new
id
c_func
(paren
)paren
(brace
(def_block
r_int
id
c_func
(paren
id
id
comma
id
id
)paren
(brace
r_return
id
dot
id
c_func
(paren
(paren
(paren
id
)paren
id
)paren
dot
id
c_func
(paren
)paren
)paren
dot
m_compareTo
c_func
(paren
id
dot
id
c_func
(paren
(paren
(paren
id
)paren
id
)paren
dot
id
c_func
(paren
)paren
)paren
)paren
suffix:semicolon
)brace
)def_block
)brace
)def_block
)paren
suffix:semicolon
)brace
r_for
c_loop
(paren
r_int
id
op_assign
l_int
suffix:semicolon
id
OL
id
dot
m_length
suffix:semicolon
id
op_increment
)paren
(brace
id
id
op_assign
id
(braket
id
)braket
suffix:semicolon
r_if
c_cond
(paren
id
op_ne
r_null
op_logical_and
id
dot
id
c_func
(paren
id
dot
id
c_func
(paren
)paren
)paren
dot
id
c_func
(paren
)paren
)paren
(brace
r_continue
suffix:semicolon
)brace
r_if
c_cond
(paren
id
r_instanceof
id
)paren
(brace
id
id
op_assign
(paren
id
)paren
id
suffix:semicolon
r_if
c_cond
(paren
id
dot
id
c_func
(paren
)paren
op_logical_or
op_logical_neg
(paren
id
dot
id
c_func
(paren
)paren
r_instanceof
id
op_logical_or
id
dot
id
c_func
(paren
)paren
r_instanceof
id
op_logical_or
id
dot
id
c_func
(paren
)paren
r_instanceof
id
)paren
)paren
(brace
r_continue
suffix:semicolon
)brace
)brace
id
dot
id
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id
r_instanceof
id
)paren
(brace
id
id
op_assign
(paren
id
)paren
id
suffix:semicolon
id
dot
id
c_func
(paren
id
c_func
(paren
l_string
)paren
comma
id
dot
id
c_func
(paren
)paren
comma
id
dot
id
c_func
(paren
)paren
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id
OG
l_int
op_logical_and
(paren
id
r_instanceof
id
)paren
)paren
(brace
id
id
op_assign
id
op_eq
l_int
ques
c_cond
id
c_func
(paren
l_string
)paren
suffix:colon
id
c_func
(paren
l_string
comma
id
dot
id
c_func
(paren
)paren
dot
id
c_func
(paren
)paren
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
comma
(paren
(paren
id
)paren
id
)paren
dot
id
c_func
(paren
)paren
)paren
suffix:semicolon
)brace
id
id
op_assign
l_string
suffix:semicolon
r_if
c_cond
(paren
id
op_eq
l_int
)paren
(brace
id
op_assign
l_string
suffix:semicolon
)brace
r_if
c_cond
(paren
id
op_eq
l_int
)paren
(brace
id
op_assign
l_string
suffix:semicolon
)brace
id
dot
id
c_func
(paren
id
dot
id
c_func
(paren
id
dot
id
c_func
(paren
)paren
)paren
comma
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
c_func
(paren
id
comma
id
)paren
suffix:semicolon
id
c_func
(paren
id
comma
id
comma
id
comma
id
op_plus
l_int
)paren
suffix:semicolon
)brace
id
dot
id
c_func
(paren
)paren
suffix:semicolon
)brace
)def_block
(def_block
r_void
id
c_func
(paren
id
id
comma
id
id
)paren
(brace
r_if
c_cond
(paren
id
r_instanceof
id
)paren
(brace
id
id
op_assign
(paren
id
)paren
id
suffix:semicolon
id
id
op_assign
id
dot
id
c_func
(paren
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
dot
m_toString
c_func
(paren
id
)paren
comma
id
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
r_if
c_cond
(paren
id
r_instanceof
id
)paren
(brace
id
id
op_assign
(paren
(paren
id
)paren
id
)paren
dot
id
c_func
(paren
)paren
suffix:semicolon
r_do
(brace
id
dot
id
c_func
(paren
id
dot
id
c_func
(paren
)paren
)paren
suffix:semicolon
)brace
r_while
c_loop
(paren
id
dot
m_next
c_func
(paren
)paren
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
id
id
suffix:semicolon
r_if
c_cond
(paren
id
r_instanceof
id
)paren
(brace
id
op_assign
(paren
(paren
id
)paren
id
)paren
dot
id
c_func
(paren
)paren
suffix:semicolon
)brace
r_else
(brace
id
op_assign
id
dot
id
c_func
(paren
)paren
suffix:semicolon
)brace
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
)def_block
)brace
)def_block
eof
(def_block
r_class
id
(brace
(def_block
r_boolean
id
c_func
(paren
)paren
(brace
r_return
l_bool
suffix:semicolon
)brace
)def_block
(def_block
r_boolean
id
c_func
(paren
)paren
(brace
r_if
c_cond
(paren
id
c_func
(paren
l_string
)paren
op_logical_or
id
c_func
(paren
l_string
)paren
)paren
(brace
r_return
l_bool
suffix:semicolon
)brace
r_return
l_bool
suffix:semicolon
)brace
)def_block
(def_block
id
id
c_func
(paren
)paren
(brace
r_return
(paren
id
)paren
id
c_func
(paren
l_string
)paren
suffix:semicolon
)brace
)def_block
(def_block
id
id
c_func
(paren
)paren
(brace
id
id
op_assign
(paren
id
)paren
id
c_func
(paren
l_string
)paren
suffix:semicolon
r_if
c_cond
(paren
id
dot
m_equals
c_func
(paren
l_string
)paren
)paren
(brace
id
op_assign
r_null
suffix:semicolon
)brace
r_return
id
suffix:semicolon
)brace
)def_block
(def_block
id
id
c_func
(paren
)paren
(brace
id
id
op_assign
id
c_func
(paren
l_string
)paren
suffix:semicolon
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
r_return
id
dot
m_toString
c_func
(paren
)paren
suffix:semicolon
)brace
r_return
r_null
suffix:semicolon
)brace
)def_block
(def_block
id
id
c_func
(paren
)paren
(brace
id
id
op_assign
(paren
id
)paren
id
c_func
(paren
l_string
)paren
suffix:semicolon
r_if
c_cond
(paren
id
op_eq
r_null
)paren
(brace
id
op_assign
r_new
id
c_func
(paren
l_int
)paren
suffix:semicolon
)brace
r_return
id
suffix:semicolon
)brace
)def_block
(def_block
id
id
c_func
(paren
)paren
(brace
id
id
op_assign
(paren
id
)paren
id
c_func
(paren
l_string
)paren
suffix:semicolon
r_if
c_cond
(paren
id
op_eq
r_null
)paren
(brace
id
op_assign
l_string
suffix:semicolon
)brace
r_return
id
suffix:semicolon
)brace
)def_block
(def_block
id
id
c_func
(paren
)paren
(brace
id
id
op_assign
(paren
id
)paren
id
c_func
(paren
l_string
)paren
suffix:semicolon
r_if
c_cond
(paren
id
op_eq
r_null
)paren
(brace
id
op_assign
l_string
suffix:semicolon
)brace
r_return
id
suffix:semicolon
)brace
)def_block
(def_block
r_boolean
id
c_func
(paren
)paren
(brace
r_if
c_cond
(paren
id
c_func
(paren
l_string
)paren
)paren
(brace
r_return
(paren
(paren
id
)paren
id
c_func
(paren
l_string
)paren
)paren
dot
id
c_func
(paren
)paren
suffix:semicolon
)brace
r_return
l_bool
suffix:semicolon
)brace
)def_block
(def_block
r_boolean
id
c_func
(paren
)paren
(brace
r_if
c_cond
(paren
id
c_func
(paren
l_string
)paren
)paren
(brace
r_return
(paren
(paren
id
)paren
id
c_func
(paren
l_string
)paren
)paren
dot
id
c_func
(paren
)paren
suffix:semicolon
)brace
r_return
l_bool
suffix:semicolon
)brace
)def_block
(def_block
id
id
c_func
(paren
)paren
(brace
id
id
op_assign
r_null
suffix:semicolon
r_if
c_cond
(paren
id
c_func
(paren
l_string
)paren
)paren
(brace
id
op_assign
(paren
id
)paren
id
c_func
(paren
l_string
)paren
suffix:semicolon
)brace
r_else
(brace
id
op_assign
l_string
suffix:semicolon
)brace
r_return
id
suffix:semicolon
)brace
)def_block
(def_block
id
id
c_func
(paren
)paren
(brace
id
id
op_assign
r_null
suffix:semicolon
r_if
c_cond
(paren
id
c_func
(paren
l_string
)paren
)paren
(brace
id
id
op_assign
(paren
id
)paren
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
op_assign
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
r_else
(brace
id
op_assign
(paren
id
)paren
id
c_func
(paren
l_string
)paren
suffix:semicolon
)brace
r_return
id
suffix:semicolon
)brace
)def_block
(def_block
r_boolean
id
c_func
(paren
)paren
(brace
r_if
c_cond
(paren
op_logical_neg
id
c_func
(paren
)paren
)paren
(brace
r_return
l_bool
suffix:semicolon
)brace
r_return
l_bool
suffix:semicolon
)brace
)def_block
(def_block
r_boolean
id
c_func
(paren
)paren
(brace
r_if
c_cond
(paren
id
c_func
(paren
)paren
dot
id
c_func
(paren
)paren
dot
m_equals
c_func
(paren
l_string
)paren
)paren
(brace
r_return
l_bool
suffix:semicolon
)brace
r_return
l_bool
suffix:semicolon
)brace
)def_block
)brace
)def_block
eof
(def_block
r_class
id
(brace
(brace
r_try
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
)brace
r_catch
(paren
id
id
)paren
(brace
id
dot
id
c_func
(paren
l_string
op_plus
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_int
)paren
suffix:semicolon
)brace
)brace
(def_block
r_void
id
c_func
(paren
id
id
(braket
)braket
)paren
(brace
id
id
op_assign
r_new
id
c_func
(paren
)paren
suffix:semicolon
id
id
op_assign
id
dot
id
c_func
(paren
)paren
suffix:semicolon
id
op_assign
id
dot
id
c_func
(paren
)paren
suffix:semicolon
id
id
op_assign
r_new
id
c_func
(paren
)paren
suffix:semicolon
id
id
op_assign
r_new
id
c_func
(paren
)paren
suffix:semicolon
id
id
op_assign
r_new
id
c_func
(paren
)paren
suffix:semicolon
id
id
op_assign
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
id
op_assign
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
id
op_assign
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
id
op_assign
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
)def_block
)brace
)def_block
eof
id
id
(brace
r_class
id
suffix:semicolon
)brace
eof
(def_block
r_class
id
(brace
(def_block
r_void
id
c_func
(paren
id
id
)paren
(brace
id
c_func
(paren
id
comma
l_int
)paren
suffix:semicolon
)brace
)def_block
(def_block
r_void
id
c_func
(paren
r_int
id
)paren
(brace
r_for
c_loop
(paren
r_int
id
op_assign
l_int
suffix:semicolon
id
OL
id
suffix:semicolon
id
op_increment
)paren
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
)brace
)brace
)def_block
(def_block
r_void
id
c_func
(paren
id
id
comma
r_int
id
)paren
(brace
id
c_func
(paren
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
op_plus
id
dot
id
c_func
(paren
)paren
)paren
suffix:semicolon
id
id
op_assign
id
dot
id
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
r_int
m_length
op_assign
id
dot
id
c_func
(paren
)paren
suffix:semicolon
r_for
c_loop
(paren
r_int
id
op_assign
l_int
suffix:semicolon
id
OL
m_length
suffix:semicolon
id
op_increment
)paren
(brace
id
id
op_assign
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
op_plus
id
dot
id
c_func
(paren
)paren
op_plus
l_string
op_plus
id
dot
id
c_func
(paren
)paren
op_plus
l_string
)paren
suffix:semicolon
)brace
)brace
r_if
c_cond
(paren
id
r_instanceof
id
)paren
(brace
id
id
op_assign
(paren
(paren
id
)paren
id
)paren
dot
id
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
dot
m_getClass
c_func
(paren
)paren
dot
id
c_func
(paren
)paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id
r_instanceof
r_byte
(braket
)braket
)paren
(brace
r_byte
(braket
)braket
id
op_assign
(paren
r_byte
(braket
)braket
)paren
id
suffix:semicolon
r_for
c_loop
(paren
r_int
id
op_assign
l_int
suffix:semicolon
id
OL
id
dot
m_length
suffix:semicolon
id
op_increment
)paren
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
(braket
id
)braket
op_amp
l_int
)paren
suffix:semicolon
)brace
)brace
r_else
(brace
)brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
)brace
)brace
id
id
op_assign
id
dot
id
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
r_while
c_loop
(paren
id
op_ne
r_null
)paren
(brace
id
c_func
(paren
id
comma
id
op_plus
l_int
)paren
suffix:semicolon
id
op_assign
id
dot
id
c_func
(paren
)paren
suffix:semicolon
)brace
id
c_func
(paren
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
op_plus
id
dot
id
c_func
(paren
)paren
op_plus
l_string
)paren
suffix:semicolon
)brace
r_else
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
)brace
)brace
)def_block
(def_block
id
c_func
(paren
id
id
)paren
(brace
id
dot
id
c_func
(paren
l_string
op_plus
id
op_plus
l_string
)paren
suffix:semicolon
id
id
op_assign
r_null
suffix:semicolon
r_try
(brace
id
op_assign
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
r_catch
(paren
id
id
)paren
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_int
)paren
suffix:semicolon
)brace
r_if
c_cond
(paren
id
op_eq
r_null
)paren
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_int
)paren
suffix:semicolon
)brace
id
id
op_assign
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
id
op_assign
r_null
suffix:semicolon
r_while
c_loop
(paren
id
dot
m_hasNext
c_func
(paren
)paren
)paren
(brace
id
op_assign
(paren
id
)paren
id
dot
m_next
c_func
(paren
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
op_plus
id
dot
m_getClass
c_func
(paren
)paren
dot
id
c_func
(paren
)paren
op_plus
l_string
)paren
suffix:semicolon
r_break
suffix:semicolon
)brace
r_if
c_cond
(paren
id
op_eq
r_null
)paren
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_int
)paren
suffix:semicolon
)brace
id
dot
id
c_func
(paren
id
comma
l_bool
)paren
suffix:semicolon
r_int
id
op_assign
id
dot
id
c_func
(paren
l_bool
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
op_plus
id
op_plus
l_string
op_plus
(paren
id
op_eq
l_int
ques
c_cond
l_string
suffix:colon
l_string
)paren
op_plus
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
)paren
suffix:semicolon
id
id
op_assign
id
dot
id
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id
op_eq
r_null
)paren
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
)brace
r_else
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
id
op_assign
id
dot
id
c_func
(paren
)paren
suffix:semicolon
id
c_func
(paren
id
dot
id
c_func
(paren
id
)paren
)paren
suffix:semicolon
id
(braket
)braket
id
op_assign
id
dot
id
c_func
(paren
)paren
suffix:semicolon
r_if
c_cond
(paren
id
op_ne
r_null
)paren
(brace
r_for
c_loop
(paren
r_int
id
op_assign
l_int
suffix:semicolon
id
OL
id
dot
m_length
suffix:semicolon
op_increment
id
)paren
(brace
id
dot
id
c_func
(paren
l_string
op_plus
id
(braket
id
)braket
)paren
suffix:semicolon
id
c_func
(paren
id
dot
id
c_func
(paren
id
(braket
id
)braket
)paren
)paren
suffix:semicolon
)brace
)brace
)brace
r_for
c_loop
(paren
r_int
id
op_assign
l_int
suffix:semicolon
id
OL
id
suffix:semicolon
id
op_increment
)paren
(brace
id
dot
id
c_func
(paren
l_string
op_plus
id
op_plus
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
)paren
suffix:semicolon
r_int
id
op_assign
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
op_plus
id
)paren
suffix:semicolon
r_int
id
op_assign
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
op_plus
id
)paren
suffix:semicolon
r_int
id
op_assign
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
op_plus
id
)paren
suffix:semicolon
r_for
c_loop
(paren
r_int
id
op_assign
l_int
suffix:semicolon
id
OL
id
suffix:semicolon
id
op_increment
)paren
(brace
id
dot
id
c_func
(paren
l_string
op_plus
id
dot
id
c_func
(paren
id
comma
id
)paren
op_plus
l_string
op_plus
id
dot
id
c_func
(paren
id
comma
id
)paren
)paren
suffix:semicolon
)brace
id
id
op_assign
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
r_if
c_cond
(paren
id
op_eq
r_null
)paren
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
)brace
r_else
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
id
op_assign
id
dot
id
c_func
(paren
)paren
suffix:semicolon
id
c_func
(paren
id
dot
id
c_func
(paren
id
)paren
)paren
suffix:semicolon
)brace
)brace
)brace
)def_block
(def_block
r_void
id
c_func
(paren
id
(braket
)braket
id
)paren
(brace
r_if
c_cond
(paren
id
dot
m_length
OL
l_int
)paren
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
)brace
r_for
c_loop
(paren
r_int
id
op_assign
l_int
suffix:semicolon
id
OL
id
dot
m_length
suffix:semicolon
id
op_increment
)paren
(brace
id
id
op_assign
r_new
id
c_func
(paren
id
(braket
id
)braket
)paren
suffix:semicolon
r_if
c_cond
(paren
op_logical_neg
id
dot
id
c_func
(paren
)paren
)paren
(brace
id
dot
id
c_func
(paren
l_string
op_plus
id
op_plus
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_int
)paren
suffix:semicolon
)brace
r_try
(brace
r_new
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
r_catch
(paren
id
id
)paren
(brace
id
dot
id
c_func
(paren
l_string
op_plus
id
)paren
suffix:semicolon
)brace
)brace
)brace
)def_block
)brace
)def_block
eof
(def_block
r_class
id
(brace
(def_block
id
c_func
(paren
)paren
(brace
id
c_func
(paren
r_null
)paren
suffix:semicolon
)brace
)def_block
(def_block
id
c_func
(paren
id
id
)paren
(brace
id
op_assign
id
suffix:semicolon
id
op_assign
id
op_assign
r_null
suffix:semicolon
)brace
)def_block
)brace
)def_block
eof
eof
(def_block
r_class
id
(brace
)brace
)def_block
eof
(def_block
r_class
id
(brace
(def_block
id
c_func
(paren
)paren
(brace
)brace
)def_block
(def_block
r_void
id
c_func
(paren
id
id
comma
id
id
comma
id
id
comma
id
id
comma
id
id
comma
id
id
)paren
(brace
r_try
(brace
id
id
(braket
)braket
op_assign
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
r_int
id
op_assign
id
dot
id
c_func
(paren
id
(braket
l_int
)braket
)paren
suffix:semicolon
id
id
op_assign
id
dot
id
c_func
(paren
)paren
suffix:semicolon
id
id
(braket
)braket
op_assign
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
r_if
c_cond
(paren
id
(braket
l_int
)braket
dot
m_equals
c_func
(paren
l_string
)paren
)paren
(brace
r_switch
c_cond
(paren
id
)paren
(brace
r_case
l_int
suffix:colon
(brace
id
dot
id
c_func
(paren
l_bool
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
comma
id
comma
id
comma
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
(braket
l_int
)braket
op_plus
l_string
op_plus
id
dot
id
c_func
(paren
)paren
)paren
suffix:semicolon
)brace
r_case
l_int
suffix:colon
(brace
id
dot
id
c_func
(paren
l_bool
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
comma
id
comma
id
comma
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
(braket
l_int
)braket
op_plus
l_string
op_plus
id
dot
id
c_func
(paren
)paren
)paren
suffix:semicolon
)brace
r_default
suffix:colon
(brace
id
dot
id
c_func
(paren
id
comma
id
comma
id
comma
l_string
op_plus
id
dot
id
c_func
(paren
)paren
op_plus
l_string
)paren
suffix:semicolon
)brace
)brace
r_return
suffix:semicolon
)brace
r_else
(brace
id
dot
id
c_func
(paren
id
comma
id
comma
id
comma
l_string
)paren
suffix:semicolon
r_return
suffix:semicolon
)brace
)brace
r_catch
(paren
id
id
)paren
(brace
id
dot
id
c_func
(paren
id
comma
id
comma
id
comma
l_string
op_plus
id
dot
id
c_func
(paren
)paren
op_plus
l_string
)paren
suffix:semicolon
)brace
)brace
)def_block
(def_block
r_void
id
c_func
(paren
id
id
comma
id
id
comma
id
id
comma
id
id
comma
id
id
comma
r_int
id
)paren
(brace
r_if
c_cond
(paren
id
OG
l_int
)paren
(brace
id
dot
id
c_func
(paren
id
comma
id
comma
id
comma
l_string
op_plus
id
dot
id
c_func
(paren
)paren
op_plus
l_string
)paren
suffix:semicolon
)brace
)brace
)def_block
(def_block
r_void
id
c_func
(paren
id
id
comma
id
id
comma
id
id
comma
id
id
comma
id
id
comma
r_int
id
)paren
(brace
r_if
c_cond
(paren
id
OG
l_int
)paren
(brace
id
dot
id
c_func
(paren
id
comma
id
comma
id
comma
l_string
)paren
suffix:semicolon
)brace
)brace
)def_block
)brace
)def_block
eof
(def_block
r_class
id
(brace
(def_block
id
c_func
(paren
id
id
comma
id
id
)paren
(brace
id
op_assign
id
suffix:semicolon
id
op_assign
id
suffix:semicolon
)brace
)def_block
(def_block
r_boolean
id
c_func
(paren
)paren
(brace
r_return
id
op_ne
r_null
suffix:semicolon
)brace
)def_block
(def_block
r_void
id
c_func
(paren
id
id
)paren
(brace
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
op_assign
r_new
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
r_new
id
c_func
(paren
)paren
)paren
suffix:semicolon
r_for
c_loop
(paren
r_int
id
op_assign
l_int
suffix:semicolon
id
op_le
l_int
suffix:semicolon
id
op_add_assign
l_int
)paren
(brace
id
dot
id
c_func
(paren
l_string
op_plus
id
)paren
suffix:semicolon
)brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
id
op_assign
id
suffix:semicolon
id
op_assign
id
suffix:semicolon
r_if
c_cond
(paren
id
dot
m_equals
c_func
(paren
l_string
)paren
)paren
(brace
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
r_else
(brace
r_try
(brace
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
)brace
r_catch
(paren
id
id
)paren
(brace
id
op_assign
l_bool
suffix:semicolon
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
)brace
r_catch
(paren
id
id
)paren
(brace
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
)brace
r_catch
(paren
id
id
)paren
(brace
id
op_assign
l_bool
suffix:semicolon
id
dot
id
c_func
(paren
l_string
)paren
suffix:semicolon
)brace
)brace
id
dot
id
c_func
(paren
)paren
suffix:semicolon
id
op_assign
id
suffix:semicolon
id
op_assign
id
suffix:semicolon
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
id
)paren
suffix:semicolon
id
dot
id
c_func
(paren
r_new
id
c_func
(paren
)paren
)paren
suffix:semicolon
id
dot
id
c_func
(paren
r_new
